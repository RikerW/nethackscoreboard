{
  "ignition": {
    "version": "3.1.0"
  },
  "passwd": {
    "users": [
      {
        "groups": [
          "docker",
          "wheel"
        ],
        "name": "core",
        "sshAuthorizedKeys": [
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDD1boyNeRqsAttjgkCmIgu87YpuYG/sr0CLoVq4Ou4gK4P/jZFCiHFZdz+RE+0ZjqRdSrcLIz8MZZre6DvPLNSyvX30duSv4rXWd+9IRRWrDbneJ3jbQbLUnM8gZclSVCYc55r/rSjM3M4IlET1x4+rZ1+ochpLT9emA9AtFUgUxxBG3ee43O07uGwUHigUOb1AiXqnaYdo9vqte1U4IUwiZIVseTszmyDaP4Uz/VCw6Vl9+OaZPvZvE6/hBwWOrv8sklBYdqZUJSI3zpy4ZvHnW7wVqqMRUh1hpf1+NVNyUDtdYzxKuOxs2sjUC+nc6qOcnythKnbcHbgbA6y8mFEp+JkfrGBx4PcnrFpOSGLeiSQiEM51yOJ+qocWA2OxO7pA+o1AGm+WjURl1Ni2THMtpzahcECJXzi9+jibSt9cJEr8oxjVfG59+/E8q9zJHdN4eqrfpanyL0fofi1kfZUPkG+LelRxfUZSbEtM5pL+Rk1g+aAaFlAdhDyNQvg8zM= aoei@djanseriy"
        ]
      }
    ]
  },
  "storage": {
    "files": [
      {
        "path": "/usr/local/bin/init-auth-tokens.sh",
        "contents": {
          "compression": "gzip",
          "source": "data:;base64,H4sIAAAAAAAC/6yQzY4bIRCE7zxFZ5NbAsx4x1ZsKZYsy/sAOefCQBvY8dCoYfyTp4+8mSQb5RYtB6Qqio+i37/TfUy6NyUIHyvYEyUE2UPBbNhUlHE0HmU/xZMDKR3mGqCFUGsuG619rGHqlaVRG8J4Ld87nUKRR+JB3YG6jvnF8bEK6/7WeM3EFQpaxlq+6LNhzVPSs6FTcL1QumCdsioBpJxPJKXTTdhAlwTyKzBR3dw3+DAHRJkcgQ0juXtg+siXT54kX65/InMbwSNIPsKvUsJOfPr9wQFvRVHGlH1WxF6fh6LPre5v8hiTR84cU9Wrbt0sVqvl437dfG4Xu8W6O+ye1rt903aH7rDfrw/77nHxBFt4JpOSUXnqhUAbCB7aRrXLlWrUogEAKGgc+QfYbkFjtTpQqUU4sgMyVJ5KhRJ9Qgbj3IyDbwLm9fP6Ztk0zcsAQcoBb6+f/W+UPCI65LckjvRM//J4fK1+BAAA///8SlUzpQIAAA=="
        },
        "mode": 493
      },
      {
        "path": "/etc/hostname",
        "contents": {
          "source": "data:,kizul%0A"
        },
        "mode": 420
      },
      {
        "overwrite": true,
        "path": "/etc/sysconfig/docker",
        "contents": {
          "compression": "gzip",
          "source": "data:;base64,H4sIAAAAAAAC/4SRMfPaMAzF93wKHcxuQq4dyh1zr0vpHYxdhKUYtY7MyXZKvn0vFAay/D3Yg396ek/awrd0EyYYLI3gqxlriTNYVRUNMI2ASoBETOCcaGZfjZ1xkFxsbrYwRAyf4HyVDB4VRIslqp6h6oiKgQlywcIgAxxP7mZpEmJqttBy8W2es086SGgp+T9sQCZDyYB/cf7vKlWDKLkALSp913eu++p2u+b48/z9+ON02DiXOYrWu2PFS2SCXw28jnMxBUcmE9vhd6qmGFdALskw8AtKE1vEuV+pyLTkXlh+/yEesMbiapRRCmgaJPJh1/Wf98v1DotKcTcsV2hrtjbKhe/sn+GfzwN6L6t58aS0zO8+fyjwoNaNV7uDzEgp7L90Xbdp/gUAAP//eDT29woCAAA="
        },
        "mode": 420
      },
      {
        "path": "/etc/profile.d/systemd-pager.sh",
        "contents": {
          "source": "data:,%23%20Tell%20systemd%20to%20not%20use%20a%20pager%20when%20printing%20information%0Aexport%20SYSTEMD_PAGER%3Dcat%0A"
        },
        "mode": 420
      },
      {
        "path": "/etc/sysctl.d/20-silence-audit.conf",
        "contents": {
          "source": "data:,%23%20Raise%20console%20message%20logging%20level%20from%20DEBUG%20(7)%20to%20WARNING%20(4)%0A%23%20to%20hide%20audit%20messages%20from%20the%20interactive%20console%0Akernel.printk%3D4%0A"
        },
        "mode": 420
      },
      {
        "path": "/etc/sysctl.d/30-docker-bridge.conf",
        "contents": {
          "source": "data:,%23%20in%20order%20for%20docker%20containers%20in%20a%20bridge%20network%20to%0A%23%20forward%20ports%20to%20the%20host%20system%2C%20we%20need%20this%20on%0Anet.ipv4.conf.all.forwarding%3D1%0A"
        },
        "mode": 420
      }
    ]
  },
  "systemd": {
    "units": [
      {
        "dropins": [
          {
            "contents": "[Service]\n# Override Execstart in main unit\nExecStart=\n# Add new Execstart with `-` prefix to ignore failure\nExecStart=-/usr/sbin/agetty --autologin core --noclear %I $TERM\nTTYVTDisallocate=no\n",
            "name": "autologin-core.conf"
          }
        ],
        "name": "serial-getty@ttyS0.service"
      },
      {
        "enabled": true,
        "name": "docker.service"
      },
      {
        "contents": "[Unit]\nDescription=Assign database passwords and fetch/trust my GPG key\nRequires=network-online.target docker.service\nAfter=network-online.target docker.service\nConditionPathExists=!/var/lib/nhs-auth-gen\n\n[Service]\nType=oneshot\nExecStart=/usr/local/bin/init-auth-tokens.sh\nExecStartPost=/usr/bin/touch /var/lib/nhs-auth-gen\nRemainAfterExit=yes\n\n[Install]\nRequiredBy=nhdb.service\n",
        "enabled": true,
        "name": "nhdb-init-auth.service"
      },
      {
        "contents": "[Unit]\nDescription=Run NHDB database in a postgres container\nAfter=nhdb-init-auth.service\nRequires=nhdb-init-auth.service\n\n[Service]\nUser=core\nExecStartPre=-/usr/bin/docker kill nhdb\nExecStartPre=-/usr/bin/docker rm nhdb\nExecStartPre=-/usr/bin/docker network create nhdb-net\nExecStartPre=-/usr/bin/docker pull seadog:5000/nhdb:testing\nExecStart=/usr/bin/docker run --net nhdb-net -h nhdb-pghost \\\n-v \"/var/run/secrets/nhdb:/run/secrets:ro\" \\\n          --user postgres  seadog:5000/nhdb:testing\nExecStop=/usr/bin/docker stop nhdb\n\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "nhdb.service"
      },
      {
        "contents": "[Unit]\nDescription=Run nhdb-feeder - NHS database back-end xlog aggregator\nRequires=nhdb.service\nAfter=nhdb.service\n\n[Service]\nUser=core\nExecStartPre=-/usr/bin/docker kill nhdb-feeder\nExecStartPre=-/usr/bin/docker rm nhdb-feeder\nExecStartPre=-/usr/bin/docker pull seadog:5000/nhdb-feeder:testing\nExecStart=/usr/bin/docker run --net nhdb-net \\\n      -v \"/var/run/secrets/nhdb:/run/secrets:ro\" \\\n            seadog:5000/nhdb-feeder:testing\nExecStop=/usr/bin/docker stop nhdb-feeder\n",
        "name": "nhdb-feeder.service"
      },
      {
        "contents": "[Unit]\nDescription=Timer to activate the database aggregator once per hour\n\n[Timer]\nOnBootSec=30min\nOnUnitActiveSec=60min\n\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "nhdb-feeder.timer"
      },
      {
        "contents": "[Unit]\nDescription=Run nhdb-mojo - NHS database Mojolicious Web Frontend\nAfter=nhdb.service\nRequires=nhdb.service\n\n[Service]\nUser=core\nExecStartPre=-/usr/bin/docker kill nhdb-mojo\nExecStartPre=-/usr/bin/docker rm nhdb-mojo\nExecStartPre=-/usr/bin/docker pull seadog:5000/nhdb-mojo:testing\nExecStart=/usr/bin/docker run --net nhdb-net -p 8080/tcp \\\n      -v \"/var/run/secrets/nhdb:/run/secrets:ro\" \\\n                      seadog:5000/nhdb-mojo:testing\nExecStop=/usr/bin/docker stop nhdb-mojo\n\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "nhdb-mojo.service"
      }
    ]
  }
}
